dict = {}ovel.randomize()for i = 0, 10000 do  local tmps = ""  for j = 0, math.random( 1, 30 ) do    tmps = tmps .. string.char( math.random( 0, 255 ) )  end  dict[ tmps:gsub( "[^%w]", "" ):lower() ] = trueendtxt = {}sb = {}tsl = {}lv = ""function mp( typ, arg )  txt:append( typ .. ( ( arg and ovel.recursiveTostring( arg ) ) or "" ) .. "\n" )endfunction redrawmw()  local ta = mw.childArea; ta.x = 0; ta.y = 0;  local t = sb.area  local ph    if t then     ph = t.height  else    ph = 10  end  ta.height = ta.height - ph  txt.area = ta  ta.y = ta.height  ta.height = ph  sb.area = ta  if sb.setParts then    sb:setParts( { [ta.width] = lv } )  endendfunction nullcb( win, mtype, arg1 )  return trueendfunction mwcb( win, mtype, arg1 )  if mtype == "close" then    ovel.quit()  elseif mtype == "menu" then  elseif mtype == "move" then  elseif mtype == "keydown" then    if arg1.name == "Enter" then      txt.text = ""      lev = ovel.closestStrings( lv, dict, 10 )      lv = ""      txt:append( ovel.recursiveTostring( lev ) )    elseif arg1.name == "Backspace" and lv ~= "" then      lv = lv:sub( 1, -2 )    elseif arg1.char then      lv = lv .. arg1.char    end    redrawmw()  elseif mtype == "resize" or mtype == "maximize" or mtype == "activate" then    redrawmw()  end  return falseend  mw = ovel.newwindow( 100, 100, 400, 300, "Lenvenshtein Distance Test", "app", mwcb )txt = ovel.newwidget( mw, 0, 0, mw.childArea.width, mw.childArea.height, "text", mwcb )sb = ovel.newwidget( mw, 0, 0, 0, 0, "statusbar", nullcb )mw:addMenu( "&File", 11, 0 )mw:addMenu( "&Close", 12, 0 )mw.visibility = trueprint( mw )while true do  local itcm = ovel.itcRetrieve()  while itcm do     loop( itcm )    itcm = ovel.itcRetrieve()  end  ovel.loop()  ovel.wait()end