txt = {}txt2 = {}sb = {}tsl = {}ovel.randomize()function mp( typ, arg )  if typ == "mouse" then  end   txt:append( typ .. ( ( arg and ovel.recursiveTostring( arg ) ) or "" ) .. "\n" )endfunction redrawmw()  local ta = mw.childArea; ta.x = 0; ta.y = 0;  local t = sb.area  local ph    if t then     ph = t.height  else    ph = 10  end  ta.height = ta.height - ph  ta.height = ta.height / 2 - 2    txt.area = ta  ta.y = ta.height + 2  txt2.area = ta  ta.y = ( ta.height + 2 ) * 2  ta.height = ph  sb.area = ta  if sb.setParts then    sb:setParts( { [ta.width] = "foo" } )  endendfunction nullcb( win, mtype, arg1 )  return trueendfunction mwcb( win, mtype, arg1 )  if mtype == "close" then    ovel.quit()  elseif mtype == "menu" then  elseif mtype == "move" then  elseif mtype == "resize" or mtype == "maximize" or mtype == "activate" then    redrawmw()  end  mp( mtype, arg1 )  return falseend  mw = ovel.newwindow( 100, 100, 800, 600, "GUI Test", "app", mwcb )txt = ovel.newwidget( mw, 0, 0, mw.childArea.width, mw.childArea.height / 2 - 2, "text", mwcb )txt2 = ovel.newwidget( mw, 0, mw.childArea.height / 2, mw.childArea.width, mw.childArea.height / 2 - 2, "textNowrap", mwcb )sb = ovel.newwidget( mw, 0, 0, 0, 0, "statusbar", nullcb )mw:addMenu( "&File", 11, 0 )mw:addMenu( "&Close", 12, 0 )mw.visibility = trueprint( mw )print( txt )print( txt2 )print( sb )while true do  ovel.loop()  ovel.wait()end